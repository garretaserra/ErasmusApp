{"version":3,"sources":["./src/app/views/message/message.page.html","./src/app/views/message/message-routing.module.ts","./src/app/views/message/message.module.ts","./src/app/views/message/message.page.scss","./src/app/views/message/message.page.ts"],"names":[],"mappings":";;;;;;;;;AAAA,ijBAAijB,eAAe,kKAAkK,8BAA8B,oHAAoH,6BAA6B,8WAA8W,iBAAiB,oMAAoM,gCAAgC,kHAAkH,+BAA+B,+D;;;;;;;;;;;;;;;;;;;ACA5lD;AACc;AAEV;AAE7C,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,yDAAW;KACvB;CACF,CAAC;AAMF;IAAA;IAAuC,CAAC;IAA3B,wBAAwB;QAJpC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,wBAAwB,CAAG;IAAD,+BAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBI;AACM;AACF;AAEA;AAEuB;AAEvB;AAW7C;IAAA;IAAgC,CAAC;IAApB,iBAAiB;QAT7B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,gFAAwB;aACzB;YACD,YAAY,EAAE,CAAC,yDAAW,CAAC;SAC5B,CAAC;OACW,iBAAiB,CAAG;IAAD,wBAAC;CAAA;AAAH;;;;;;;;;;;;ACnB9B,+DAA+D,mJ;;;;;;;;;;;;;;;;;;;;;;;;ACAb;AACS;AACH;AACE;AAGb;AACoB;AACZ;AACsC;AAO3F;IAQE,qBAAmB,OAAsB,EACrB,WAAwB,EACzB,OAAyB,EACzB,WAAwB,EACvB,cAA8B,EAC/B,qBAA4C;QAL5C,YAAO,GAAP,OAAO,CAAe;QACrB,gBAAW,GAAX,WAAW,CAAa;QACzB,YAAO,GAAP,OAAO,CAAkB;QACzB,gBAAW,GAAX,WAAW,CAAa;QACvB,mBAAc,GAAd,cAAc,CAAgB;QAC/B,0BAAqB,GAArB,qBAAqB,CAAuB;IAAI,CAAC;IAE7D,8BAAQ,GAAd;;;;;;;wBACC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;wBAC/C,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAChD,SAAI;wBAAkB,qBAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC,SAAS,EAAE;;wBAA5E,GAAK,cAAc,GAAG,SAAsD,CAAC;wBAC7E,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,UAAC,IAAc;4BAClD,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAE,cAAI,IAAI,WAAI,CAAC,CAAC,CAAC,KAAK,KAAI,CAAC,IAAI,CAAC,KAAK,EAA3B,CAA2B,CAAC,CAAC,CAAC,wCAAwC;wBAC7G,CAAC,CAAC,CAAC;wBACH,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,UAAC,IAAgB;4BACtD,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAE,cAAI,IAAI,WAAI,CAAC,IAAI,KAAK,KAAI,CAAC,IAAI,CAAC,KAAK,EAA7B,CAA6B,CAAC,CAAC,CAAC,wCAAwC;wBAC9G,CAAC,CAAC,CAAC;wBACH,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;wBAChC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,UAAC,IAAsB;4BAC3D,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,+DAAO,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,KAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC/G,CAAC,CAAC,CAAC;;;;;KACJ;IAED,oCAAc,GAAd,UAAe,IAAY;QACvB,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,WAAI,CAAC,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAA3C,CAA2C,CAAC,CAAC,MAAM,CAAC;IACpG,CAAC;IAED,gCAAU,GAAV,UAAW,IAAY;QACnB,IAAM,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,WAAI,CAAC,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAjD,CAAiD,CAAC,CAAC;QACpG,OAAO,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC/B,CAAC;IAED,sCAAgB,GAAhB,UAAiB,IAAY;QAC3B,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,gBAAgB,IAAG,KAAG,IAAM,EAAC,CAAC;QAC3D,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,WAAI,CAAC,MAAM,KAAK,IAAI,EAApB,CAAoB,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG,IAAK,UAAG,CAAC,IAAI,GAAG,IAAI,EAAf,CAAe,CAAC,CAAC;IAC/F,CAAC;;gBAnC2B,4DAAa;gBACR,qEAAW;gBAChB,2EAAgB;gBACZ,kEAAW;gBACP,uEAAc;gBACR,qGAAqB;;IAbpD,WAAW;QALvB,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,mJAAkC;;SAEnC,CAAC;+EAS4B,4DAAa;YACR,qEAAW;YAChB,2EAAgB;YACZ,kEAAW;YACP,uEAAc;YACR,qGAAqB;OAbpD,WAAW,CA6CvB;IAAD,kBAAC;CAAA;AA7CuB","file":"views-message-message-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>Messages</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-list>\\n    <ion-list-header>\\n      Online\\n    </ion-list-header>\\n    <ion-item *ngFor=\\\"let userItem of userList\\\" (click)=\\\"viewConversation(userItem[0])\\\">\\n        <ion-avatar slot=\\\"start\\\">\\n          <img src=\\\"../../../assets/img/default_user.png\\\">\\n        </ion-avatar>\\n        <ion-label>\\n          <h2>{{ userItem[0] }}</h2>\\n          <h3>\\n            <span *ngIf=\\\"filterLast(userItem[0]).author === user.email\\\">\\n              <b>You: </b>\\n            </span>\\n            {{filterLast(userItem[0]).text}}\\n          </h3>\\n        </ion-label>\\n      <ion-badge *ngIf=\\\"filterAndCount(userItem[0]) != 0\\\" slot=\\\"end\\\">{{filterAndCount(userItem[0])}}</ion-badge>\\n    </ion-item>\\n  </ion-list>\\n  <ion-list>\\n    <ion-list-header>\\n      Everybody\\n    </ion-list-header>\\n    <ion-item *ngFor=\\\"let userItem of users\\\" (click)=\\\"viewConversation(userItem.name)\\\">\\n      <ion-avatar slot=\\\"start\\\">\\n        <img src=\\\"../../../assets/img/default_user.png\\\">\\n      </ion-avatar>\\n      <ion-label>\\n        <h2>{{ userItem.name }}</h2>\\n        <h3 *ngIf=\\\"filterLast(userItem.name)\\\">\\n            <span *ngIf=\\\"filterLast(userItem.name).author === user.email\\\">\\n              <b>You: </b>\\n            </span>\\n          {{filterLast(userItem.name).text}}\\n        </h3>\\n      </ion-label>\\n      <ion-badge *ngIf=\\\"filterAndCount(userItem.name) != 0\\\" slot=\\\"end\\\">{{filterAndCount(userItem.name)}}</ion-badge>\\n    </ion-item>\\n  </ion-list>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { MessagePage } from './message.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MessagePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MessagePageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MessagePageRoutingModule } from './message-routing.module';\n\nimport { MessagePage } from './message.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    MessagePageRoutingModule\n  ],\n  declarations: [MessagePage]\n})\nexport class MessagePageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL21lc3NhZ2UvbWVzc2FnZS5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport {UserService} from '../../models/User/user.service';\nimport {ChatService} from '../../services/chat.service';\nimport {FriendsService} from '../friends/friends.service';\nimport {User} from '../../models/User/user';\nimport {UserName} from '../../models/User/userName';\nimport {NavController} from '@ionic/angular';\nimport {StorageComponent} from '../../storage/storage.component';\nimport {Message} from '../../models/Message/message';\nimport {NotificationComponent} from '../../components/notification/notification.component';\n\n@Component({\n  selector: 'app-message',\n  templateUrl: './message.page.html',\n  styleUrls: ['./message.page.scss'],\n})\nexport class MessagePage implements OnInit {\n\n  storedMessages: Message[];\n  message: string;\n  user: User;\n  users: UserName[];\n  userList: string[];\n\n  constructor(public navCtrl: NavController,\n              private userService: UserService,\n              public storage: StorageComponent,\n              public chatService: ChatService,\n              private friendsService: FriendsService,\n              public notificationComponent: NotificationComponent) { }\n\n   async ngOnInit() {\n    this.user = JSON.parse(this.storage.getUser());\n    this.chatService.connectSocket(this.user.email);\n    this.storedMessages = await this.chatService.getStoredMessages().toPromise();\n    this.chatService.getList().subscribe((list: string[]) => {\n      this.userList = list.filter( item => item[0] !== this.user.email); // TODO: User esta mal, email sale name.\n    });\n    this.friendsService.getUsers().subscribe((list: UserName[]) => {\n        this.users = list.filter( item => item.name !== this.user.email); // TODO: User esta mal, email sale name.\n    });\n    this.chatService.forceGetList();\n    this.chatService.getMessage().subscribe((data: {email, message}) => {\n        this.storedMessages.push(new Message('', data.email, this.user.email, data.message, new Date(), false, 0));\n    });\n  }\n\n  filterAndCount(name: string) {\n      return this.storedMessages.filter((item) => item.author === name && item.read === false).length;\n  }\n\n  filterLast(name: string) {\n      const tmp = this.storedMessages.filter((item) => item.author === name || item.destination === name);\n      return tmp[tmp.length - 1];\n  }\n\n  viewConversation(name: string) {\n    this.navCtrl.navigateForward('/conversation/' + `${name}`);\n    this.storedMessages.filter((item) => item.author === name).forEach((msg) => msg.read = true);\n  }\n\n}\n"],"sourceRoot":""}